package com.example.wearther.community.screen

import android.Manifest
import android.net.Uri
import android.os.Build
import android.os.Environment
import android.widget.Toast
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import androidx.core.content.FileProvider
import androidx.navigation.NavController
import coil.compose.rememberAsyncImagePainter
import com.example.wearther.home.recommendation.RecommendationViewModel
import java.io.File

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AddPostScreen(
    navController: NavController,
    recommendationViewModel: RecommendationViewModel
) {
    var description by remember { mutableStateOf("") }
    var temperature by remember { mutableStateOf("") }
    var weather by remember { mutableStateOf("") }
    var selectedImageUri by remember { mutableStateOf<Uri?>(null) }
    var selectedImageUrl by remember { mutableStateOf<String?>(null) } // AI Ï∂îÏ≤ú Ïù¥ÎØ∏ÏßÄ URL
    var showPhotoDialog by remember { mutableStateOf(false) }

    val context = LocalContext.current

    LaunchedEffect(Unit) {
        navController.currentBackStackEntry
            ?.savedStateHandle
            ?.get<String>("selected_image_url")
            ?.let { url ->
                selectedImageUrl = url
                selectedImageUri = null
                navController.currentBackStackEntry
                    ?.savedStateHandle
                    ?.remove<String>("selected_image_url")
            }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Í≤åÏãúÍ∏Ä ÏûëÏÑ±") },
                navigationIcon = {
                    IconButton(onClick = { navController.popBackStack() }) {
                        Icon(Icons.Default.ArrowBack, contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞")
                    }
                },
                actions = {
                    TextButton(
                        onClick = {
                            // TODO: Í≤åÏãúÍ∏Ä Ï†ÄÏû• Î°úÏßÅ (Ïù¥ÎØ∏ÏßÄ Uri ÎòêÎäî URL ÏÇ¨Ïö©)
                            if (description.isNotEmpty()) {
                                Toast.makeText(
                                    context,
                                    "Í≤åÏãúÍ∏ÄÏù¥ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§",
                                    Toast.LENGTH_SHORT
                                ).show()
                                navController.popBackStack()
                            } else {
                                Toast.makeText(
                                    context,
                                    "ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî",
                                    Toast.LENGTH_SHORT
                                ).show()
                            }
                        },
                        enabled = description.isNotEmpty()
                    ) {
                        Text(
                            "Îì±Î°ù",
                            style = MaterialTheme.typography.titleMedium,
                            color = if (description.isNotEmpty())
                                MaterialTheme.colorScheme.primary
                            else Color.Gray
                        )
                    }
                }
            )
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(padding)
                .verticalScroll(rememberScrollState())
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏòÅÏó≠
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(250.dp)
                    .clip(RoundedCornerShape(12.dp))
                    .background(Color(0xFFF3F4F6))
                    .clickable { showPhotoDialog = true },
                contentAlignment = Alignment.Center
            ) {
                when {
                    // URI Ïù¥ÎØ∏ÏßÄ (Ïπ¥Î©îÎùº/Í∞§Îü¨Î¶¨)
                    selectedImageUri != null -> {
                        Image(
                            painter = rememberAsyncImagePainter(selectedImageUri),
                            contentDescription = "ÏÑ†ÌÉùÎêú Ïù¥ÎØ∏ÏßÄ",
                            modifier = Modifier.fillMaxSize(),
                            contentScale = ContentScale.Crop
                        )
                    }
                    // URL Ïù¥ÎØ∏ÏßÄ (AI Ï∂îÏ≤ú)
                    selectedImageUrl != null -> {
                        Image(
                            painter = rememberAsyncImagePainter(selectedImageUrl),
                            contentDescription = "AI Ï∂îÏ≤ú Ïù¥ÎØ∏ÏßÄ",
                            modifier = Modifier.fillMaxSize(),
                            contentScale = ContentScale.Crop
                        )
                    }
                    // ÌîåÎ†àÏù¥Ïä§ÌôÄÎçî
                    else -> {
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally,
                            verticalArrangement = Arrangement.spacedBy(12.dp)
                        ) {
                            Icon(
                                imageVector = Icons.Default.AddAPhoto,
                                contentDescription = "ÏÇ¨ÏßÑ Ï∂îÍ∞Ä",
                                tint = Color(0xFF9CA3AF),
                                modifier = Modifier.size(56.dp)
                            )
                            Text(
                                text = "ÏÇ¨ÏßÑ Ï∂îÍ∞Ä",
                                style = MaterialTheme.typography.titleMedium,
                                color = Color(0xFF6B7280),
                                fontWeight = FontWeight.SemiBold
                            )
                            Text(
                                text = "ÌÉ≠ÌïòÏó¨ Ï¥¨ÏòÅ, Ïï®Î≤î ÏÑ†ÌÉù, AI Ï∂îÏ≤ú",
                                style = MaterialTheme.typography.bodySmall,
                                color = Color(0xFF9CA3AF)
                            )
                        }
                    }
                }

                // Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú Î≤ÑÌäº
                if (selectedImageUri != null || selectedImageUrl != null) {
                    Box(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(8.dp),
                        contentAlignment = Alignment.TopEnd
                    ) {
                        IconButton(
                            onClick = {
                                selectedImageUri = null
                                selectedImageUrl = null
                            },
                            modifier = Modifier
                                .background(
                                    Color.Black.copy(alpha = 0.5f),
                                    RoundedCornerShape(50)
                                )
                        ) {
                            Icon(
                                Icons.Default.Close,
                                contentDescription = "Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú",
                                tint = Color.White
                            )
                        }
                    }
                }
            }

            // ÏÑ§Î™Ö ÏûÖÎ†•
            OutlinedTextField(
                value = description,
                onValueChange = { description = it },
                label = { Text("Ïò§ÎäòÏùò ÏΩîÎîîÎ•º ÏÜåÍ∞úÌï¥Ï£ºÏÑ∏Ïöî") },
                placeholder = { Text("Ïòà: Ïò§Îäò ÎÇ†Ïî® ÏôÑÏ†Ñ Ï¢ãÏïÑÏöî! Í∞ÄÏùÑ ÏΩîÎîî Ï∂îÏ≤úÌï©ÎãàÎã§ üçÇ") },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(150.dp),
                maxLines = 5,
                colors = OutlinedTextFieldDefaults.colors(
                    focusedBorderColor = MaterialTheme.colorScheme.primary,
                    unfocusedBorderColor = Color(0xFFE5E7EB)
                )
            )

            // ÎÇ†Ïî® Ï†ïÎ≥¥
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                OutlinedTextField(
                    value = temperature,
                    onValueChange = { temperature = it },
                    label = { Text("Ïò®ÎèÑ") },
                    placeholder = { Text("18¬∞C") },
                    leadingIcon = {
                        Icon(
                            Icons.Default.Thermostat,
                            contentDescription = null,
                            tint = Color(0xFF9CA3AF)
                        )
                    },
                    modifier = Modifier.weight(1f),
                    colors = OutlinedTextFieldDefaults.colors(
                        focusedBorderColor = MaterialTheme.colorScheme.primary,
                        unfocusedBorderColor = Color(0xFFE5E7EB)
                    )
                )
                OutlinedTextField(
                    value = weather,
                    onValueChange = { weather = it },
                    label = { Text("ÎÇ†Ïî®") },
                    placeholder = { Text("ÎßëÏùå") },
                    leadingIcon = {
                        Icon(
                            Icons.Default.WbSunny,
                            contentDescription = null,
                            tint = Color(0xFF9CA3AF)
                        )
                    },
                    modifier = Modifier.weight(1f),
                    colors = OutlinedTextFieldDefaults.colors(
                        focusedBorderColor = MaterialTheme.colorScheme.primary,
                        unfocusedBorderColor = Color(0xFFE5E7EB)
                    )
                )
            }

            // ÏïàÎÇ¥ Ïπ¥Îìú
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(
                    containerColor = Color(0xFFF0F9FF)
                ),
                shape = RoundedCornerShape(12.dp)
            ) {
                Row(
                    modifier = Modifier.padding(16.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        Icons.Default.Lightbulb,
                        contentDescription = null,
                        tint = Color(0xFF0EA5E9),
                        modifier = Modifier.size(24.dp)
                    )
                    Spacer(modifier = Modifier.width(12.dp))
                    Text(
                        text = "Ïò§Îäò ÎÇ†Ïî®Ïóê Ïñ¥Ïö∏Î¶¨Îäî ÏΩîÎîîÎ•º Í≥µÏú†Ìï¥Î≥¥ÏÑ∏Ïöî!",
                        style = MaterialTheme.typography.bodyMedium,
                        color = Color(0xFF0369A1)
                    )
                }
            }
        }
    }

    // ÏÇ¨ÏßÑ ÏÑ†ÌÉù Îã§Ïù¥ÏñºÎ°úÍ∑∏
    if (showPhotoDialog) {
        PhotoSelectionDialog(
            onDismiss = { showPhotoDialog = false },
            onImageUriSelected = { uri ->
                selectedImageUri = uri
                selectedImageUrl = null
            },
            onAIRecommendation = {
                // AI Ï∂îÏ≤ú ÌôîÎ©¥ÏúºÎ°ú Ïù¥ÎèôÌïòÏó¨ Ïù¥ÎØ∏ÏßÄ ÏÑ†ÌÉù
                navController.navigate("ai_recommendation_picker") {
                    launchSingleTop = true
                }
                showPhotoDialog = false
            }
        )
    }
}

@Composable
fun PhotoSelectionDialog(
    onDismiss: () -> Unit,
    onImageUriSelected: (Uri) -> Unit,
    onAIRecommendation: () -> Unit
) {
    val context = LocalContext.current
    var cameraImageUri by remember { mutableStateOf<Uri?>(null) }

    // Í∞§Îü¨Î¶¨ Îü∞Ï≤ò
    val galleryLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.GetContent()
    ) { uri ->
        uri?.let {
            onImageUriSelected(it)
            onDismiss()
        }
    }

    // Ïπ¥Î©îÎùº Îü∞Ï≤ò
    val cameraLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.TakePicture()
    ) { success ->
        if (success && cameraImageUri != null) {
            onImageUriSelected(cameraImageUri!!)
            onDismiss()
        }
    }

    // Ïπ¥Î©îÎùº Ïã§Ìñâ Ìï®Ïàò
    fun launchCamera() {
        try {
            val photoFile = File(
                context.getExternalFilesDir(Environment.DIRECTORY_PICTURES),
                "IMG_${System.currentTimeMillis()}.jpg"
            )

            cameraImageUri = FileProvider.getUriForFile(
                context,
                "${context.packageName}.fileprovider",
                photoFile
            )

            cameraLauncher.launch(cameraImageUri)
        } catch (e: Exception) {
            Toast.makeText(context, "Ïπ¥Î©îÎùº Ïã§Ìñâ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§", Toast.LENGTH_SHORT).show()
        }
    }

    // Ïπ¥Î©îÎùº Í∂åÌïú Îü∞Ï≤ò
    val cameraPermissionLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestPermission()
    ) { isGranted ->
        if (isGranted) {
            launchCamera()
        } else {
            Toast.makeText(context, "Ïπ¥Î©îÎùº Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§", Toast.LENGTH_SHORT).show()
        }
    }

    // Í∞§Îü¨Î¶¨ Í∂åÌïú Îü∞Ï≤ò
    val galleryPermissionLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestPermission()
    ) { isGranted ->
        if (isGranted) {
            galleryLauncher.launch("image/*")
        } else {
            Toast.makeText(context, "Í∞§Îü¨Î¶¨ Ï†ëÍ∑º Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§", Toast.LENGTH_SHORT).show()
        }
    }

    // Í∞§Îü¨Î¶¨ Ïã§Ìñâ Ìï®Ïàò
    fun launchGallery() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            galleryPermissionLauncher.launch(Manifest.permission.READ_MEDIA_IMAGES)
        } else {
            galleryLauncher.launch("image/*")
        }
    }

    Dialog(onDismissRequest = onDismiss) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(24.dp),
            shape = RoundedCornerShape(20.dp),
            colors = CardDefaults.cardColors(containerColor = Color.White),
            elevation = CardDefaults.cardElevation(8.dp)
        ) {
            Column(
                modifier = Modifier.padding(28.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.spacedBy(20.dp)
            ) {
                // Ìó§Îçî ÏïÑÏù¥ÏΩò
                Box(
                    modifier = Modifier
                        .size(72.dp)
                        .background(
                            color = MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),
                            shape = RoundedCornerShape(50)
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.AddAPhoto,
                        contentDescription = null,
                        tint = MaterialTheme.colorScheme.primary,
                        modifier = Modifier.size(36.dp)
                    )
                }

                // ÌÉÄÏù¥ÌãÄ
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Text(
                        "ÏÇ¨ÏßÑ Ï∂îÍ∞Ä",
                        fontSize = 22.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color.Black
                    )
                    Text(
                        "ÏÇ¨ÏßÑÏùÑ Î∂àÎü¨Ïò¨ Î∞©Î≤ïÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
                        fontSize = 14.sp,
                        color = Color(0xFF6B7280)
                    )
                }

                // Î≤ÑÌäº ÏòÅÏó≠
                Column(
                    verticalArrangement = Arrangement.spacedBy(12.dp),
                    modifier = Modifier.fillMaxWidth()
                ) {
                    // üì∑ Ïπ¥Î©îÎùº Î≤ÑÌäº
                    ElevatedButton(
                        onClick = {
                            cameraPermissionLauncher.launch(Manifest.permission.CAMERA)
                        },
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(56.dp),
                        shape = RoundedCornerShape(12.dp),
                        colors = ButtonDefaults.elevatedButtonColors(
                            containerColor = MaterialTheme.colorScheme.primary
                        )
                    ) {
                        Icon(
                            Icons.Default.CameraAlt,
                            contentDescription = null,
                            modifier = Modifier.size(22.dp),
                            tint = Color.White
                        )
                        Spacer(Modifier.width(12.dp))
                        Text(
                            "Ïπ¥Î©îÎùºÎ°ú Ï¥¨ÏòÅÌïòÍ∏∞",
                            fontSize = 16.sp,
                            color = Color.White
                        )
                    }

                    // üñºÔ∏è Í∞§Îü¨Î¶¨ Î≤ÑÌäº
                    OutlinedButton(
                        onClick = { launchGallery() },
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(56.dp),
                        shape = RoundedCornerShape(12.dp),
                        colors = ButtonDefaults.outlinedButtonColors(
                            contentColor = MaterialTheme.colorScheme.primary
                        )
                    ) {
                        Icon(
                            Icons.Default.PhotoLibrary,
                            contentDescription = null,
                            modifier = Modifier.size(22.dp)
                        )
                        Spacer(Modifier.width(12.dp))
                        Text("Í∞§Îü¨Î¶¨ÏóêÏÑú ÏÑ†ÌÉùÌïòÍ∏∞", fontSize = 16.sp)
                    }

                    // ü§ñ AI Ï∂îÏ≤ú Î≤ÑÌäº
                    OutlinedButton(
                        onClick = {
                            onAIRecommendation()
                        },
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(56.dp),
                        shape = RoundedCornerShape(12.dp),
                        colors = ButtonDefaults.outlinedButtonColors(
                            contentColor = Color(0xFF8B5CF6)
                        )
                    ) {
                        Icon(
                            Icons.Default.AutoAwesome,
                            contentDescription = null,
                            modifier = Modifier.size(22.dp)
                        )
                        Spacer(Modifier.width(12.dp))
                        Text("AI ÏΩîÎîî Ï∂îÏ≤úÎ∞õÍ∏∞", fontSize = 16.sp)
                    }
                }

                HorizontalDivider(
                    modifier = Modifier.padding(vertical = 8.dp),
                    color = Color(0xFFE5E7EB)
                )

                // Ï∑®ÏÜå Î≤ÑÌäº
                TextButton(
                    onClick = onDismiss,
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Text("Ï∑®ÏÜå", color = Color(0xFF6B7280), fontSize = 16.sp)
                }
            }
        }
    }
}