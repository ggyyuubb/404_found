package com.example.wearther.home.recommendation

import android.content.Context
import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import coil.compose.AsyncImage
import com.example.wearther.home.weather.WeatherViewModel
import androidx.lifecycle.viewmodel.compose.viewModel

@Composable
fun HomeBottomSheetContent(
    textColor: Color,
    viewModel: RecommendationViewModel,
    weatherViewModel: WeatherViewModel = viewModel()
) {
    val context = LocalContext.current
    val sharedPreferences = context.getSharedPreferences("myPrefs", Context.MODE_PRIVATE)
    val jwt = sharedPreferences.getString("jwt", null)

    val errorMessage by viewModel.errorMessage.collectAsState()
    val temp by viewModel.temp.collectAsState()
    val weatherCode by viewModel.weatherCode.collectAsState()
    val locationText by weatherViewModel.locationText.collectAsState()

    // ‚úÖ jwt ÎòêÎäî ÏúÑÏπòÍ∞Ä Î∞îÎÄåÎ©¥ Ïã§ÌñâÎê® (Ï≤òÏùå ÌôîÎ©¥ ÏßÑÏûÖ Ïãú ÏûêÎèô Ïã§ÌñâÎê®)
    // ‚ùå [ÏûÑÏãú ÎπÑÌôúÏÑ±Ìôî] Ïã§Ï†ú ÏúÑÏπò Í∏∞Î∞ò ÏöîÏ≤≠ (AI Î™®Îç∏Ïù¥ 'ÏÑúÏö∏', 'ÎåÄÍµ¨'Îßå Ïù∏ÏãùÌïòÎäî Î¨∏Ï†úÎ°ú Ï£ºÏÑù Ï≤òÎ¶¨)
    /*
    LaunchedEffect(jwt, locationText) {
        Log.d("DEBUG", "üöÄ HomeBottomSheetContent ÏßÑÏûÖ") // ‚úÖ ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏
        Log.d("JWT_CHECK", "üéØ JWT: $jwt") // ‚úÖ JWT ÌôïÏù∏ Î°úÍ∑∏
        Log.d("LOCATION_CHECK", "üìç ÌòÑÏû¨ ÏúÑÏπò ÌÖçÏä§Ìä∏: $locationText") // ‚úÖ ÏúÑÏπò ÌôïÏù∏ Î°úÍ∑∏

        if (!jwt.isNullOrEmpty()) { // ‚úÖ JWTÍ∞Ä ÏûàÏùÑ Í≤ΩÏö∞ÏóêÎßå Ï∂îÏ≤ú ÏöîÏ≤≠
            val city = locationText.split(" ").firstOrNull() ?: "Seoul" // ‚úÖ ÏúÑÏπò Î¨∏ÏûêÏó¥ Ï§ë ÎèÑÏãúÎ™Ö Ï∂îÏ∂ú (Ïòà: ÏÑúÏö∏ Í∞ïÎÇ®Íµ¨ ‚Üí ÏÑúÏö∏)
            Log.d("RECOMMEND", "üì¶ Ï∂îÏ≤ú ÏöîÏ≤≠ ÎèÑÏãú: $city") // ‚úÖ ÏöîÏ≤≠ Î°úÍ∑∏
            viewModel.fetchRecommendations(jwt, city) // ‚úÖ Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠
        } else {
            Log.e("DEBUG", "‚ùå JWT ÏóÜÏùå") // ‚úÖ ÌÜ†ÌÅ∞ ÏóÜÏùå Ïò§Î•ò Î°úÍ∑∏
        }
    }
    */

    // ‚úÖ [ÏûÑÏãú ÎåÄÏ≤¥] ÎèÑÏãúÎ™ÖÏùÑ 'ÏÑúÏö∏'Î°ú Í≥†Ï†ïÌïòÏó¨ Ï∂îÏ≤ú ÏöîÏ≤≠ (AI ÏûÑÏãú Î™®Îç∏ ÎåÄÏùëÏö©)
    LaunchedEffect(jwt, locationText) {
        Log.d("DEBUG", "üöÄ HomeBottomSheetContent ÏßÑÏûÖ")
        Log.d("JWT_CHECK", "üéØ JWT: $jwt")
        Log.d("LOCATION_CHECK", "üìç ÌòÑÏû¨ ÏúÑÏπò ÌÖçÏä§Ìä∏: $locationText")

        if (!jwt.isNullOrEmpty()) {
            val city = locationText.split(" ").firstOrNull()?.takeIf { it.isNotBlank() } ?: "Seoul"
            Log.d("RECOMMEND", "üì¶ Ï∂îÏ≤ú ÏöîÏ≤≠ ÎèÑÏãú: $city")
            viewModel.fetchRecommendations(jwt, city)
        } else {
            Log.e("DEBUG", "‚ùå JWT ÏóÜÏùå")
        }
    }

    val response by viewModel.response.collectAsState()
    var isLoading by remember { mutableStateOf(false) }

    // ‚úÖ Î°úÎî© Ï§ëÏù¥Î©¥ Î°úÎî© UI
    if (isLoading) {
        Column(
            modifier = Modifier.fillMaxWidth().padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            CircularProgressIndicator()
            Spacer(modifier = Modifier.height(8.dp))
            Text(text = "Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ëÏûÖÎãàÎã§...", color = Color.Gray)
        }
        return
    }

    // responseÍ∞Ä nullÏù∏ Í≤ΩÏö∞ Ï≤òÎ¶¨ (Ï§ëÎ≥µ Ï†úÍ±∞)
    if (response == null) {
        Column(
            modifier = Modifier.fillMaxWidth().padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(text = "Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞Î•º Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.", color = Color.Gray)
        }
        return
    }

    // ÏïàÏ†ÑÌïòÍ≤å Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    val top = try {
        response?.getTop()
    } catch (e: Exception) {
        Log.e("HomeBottomSheet", "getTop() failed: ${e.message}", e)
        null
    }

    val bottom = try {
        response?.getBottom()
    } catch (e: Exception) {
        Log.e("HomeBottomSheet", "getBottom() failed: ${e.message}", e)
        null
    }

    val outer = try {
        response?.getOuter()
    } catch (e: Exception) {
        Log.e("HomeBottomSheet", "getOuter() failed: ${e.message}", e)
        null
    }

    val items = listOfNotNull(outer, top, bottom)
        .filter { !it.url.isNullOrBlank() }

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp)
    ) {
        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = "Ïò§ÎäòÏùò ÎÇ†Ïî®Îäî...",
            fontSize = 18.sp,
            fontWeight = FontWeight.Bold,
            color = textColor
        )

        Spacer(modifier = Modifier.height(12.dp))

        if (temp != null && weatherCode != null) {
            val advice = getWeatherAdvice(weatherCode, temp)

            Spacer(modifier = Modifier.height(8.dp))

            listOf(advice.weatherComment, advice.tempComment)
                .filter { it.isNotBlank() }
                .forEach { comment ->
                    Surface(
                        color = MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),
                        shape = RoundedCornerShape(12.dp),
                        tonalElevation = 2.dp,
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 4.dp)
                    ) {
                        Text(
                            text = comment,
                            color = MaterialTheme.colorScheme.onSurface,
                            modifier = Modifier.padding(horizontal = 16.dp, vertical = 12.dp),
                            fontSize = 14.sp
                        )
                    }
                }

            Spacer(modifier = Modifier.height(8.dp))
        }

        Text(
            text = "Ïò§ÎäòÏùò Ï∂îÏ≤ú ÏΩîÎîîÎäî...",
            fontSize = 18.sp,
            fontWeight = FontWeight.Bold,
            color = textColor
        )

        Spacer(modifier = Modifier.height(12.dp))

        if (items.isEmpty()) {
            // Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùÑ Îïå Îçî ÏπúÌôîÏ†ÅÏù∏ Î©îÏãúÏßÄ
            Surface(
                color = MaterialTheme.colorScheme.surfaceVariant,
                shape = RoundedCornerShape(12.dp),
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text(
                        text = "Ï∂îÏ≤ú ÏΩîÎîîÎ•º Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§",
                        color = MaterialTheme.colorScheme.onSurfaceVariant,
                        fontSize = 16.sp
                    )
                    Spacer(modifier = Modifier.height(4.dp))
                    Text(
                        text = "Ïû†Ïãú ÌõÑ Îã§Ïãú ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî",
                        color = Color.Gray,
                        fontSize = 14.sp
                    )
                }
            }
        } else {
            Row(
                horizontalArrangement = Arrangement.spacedBy(12.dp),
                modifier = Modifier.fillMaxWidth()
            ) {
                items.forEach { item ->
                    Box(
                        modifier = Modifier
                            .size(width = 160.dp, height = 200.dp)
                            .clip(RoundedCornerShape(12.dp))
                    ) {
                        AsyncImage(
                            model = item.url ?: "",
                            contentDescription = item.category ?: "ÏùòÎ•ò",
                            modifier = Modifier.fillMaxSize()
                        )
                        Box(
                            modifier = Modifier
                                .fillMaxWidth()
                                .align(Alignment.BottomCenter)
                                .background(Color.Black.copy(alpha = 0.5f))
                                .padding(6.dp)
                        ) {
                            Text(
                                text = item.category ?: "ÏùòÎ•ò",
                                color = Color.White,
                                fontWeight = FontWeight.Bold,
                                modifier = Modifier.align(Alignment.Center)
                            )
                        }
                    }
                }
            }
        }

        // ÏóêÎü¨ Î©îÏãúÏßÄ ÌëúÏãú
        if (!errorMessage.isNullOrBlank()) {
            Spacer(modifier = Modifier.height(16.dp))
            Surface(
                color = MaterialTheme.colorScheme.errorContainer,
                shape = RoundedCornerShape(8.dp),
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(
                    text = errorMessage.orEmpty(),
                    color = MaterialTheme.colorScheme.onErrorContainer,
                    fontSize = 14.sp,
                    modifier = Modifier.padding(12.dp)
                )
            }
        }
    }
}