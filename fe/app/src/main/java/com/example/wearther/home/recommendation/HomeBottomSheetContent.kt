package com.example.wearther.home.recommendation

import android.content.Context
import android.util.Log
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Path
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import coil.compose.AsyncImage
import com.example.wearther.R
import com.example.wearther.home.weather.WeatherViewModel
import androidx.lifecycle.viewmodel.compose.viewModel
import kotlinx.coroutines.launch

@Composable
fun HomeBottomSheetContent(
    textColor: Color,
    viewModel: RecommendationViewModel,
    weatherViewModel: WeatherViewModel = viewModel()
) {
    val context = LocalContext.current
    val sharedPreferences = context.getSharedPreferences("myPrefs", Context.MODE_PRIVATE)
    val jwt = sharedPreferences.getString("jwt", null)

    val errorMessage by viewModel.errorMessage.collectAsState()
    val temp by viewModel.temp.collectAsState()
    val weatherCode by viewModel.weatherCode.collectAsState()
    val locationText by weatherViewModel.locationText.collectAsState()
    val response by viewModel.response.collectAsState()

    var isLoading by remember { mutableStateOf(false) }
    val coroutineScope = rememberCoroutineScope()

    // ÏùëÎãµ Îì§Ïñ¥Ïò§Î©¥ Î°úÎî© Ï¢ÖÎ£å
    LaunchedEffect(response) {
        if (response != null) isLoading = false
    }

    // Î∂àÎü¨Ïò§Îäî Ï§ë
    if (isLoading) {
        RecommendationLoadingComponent(locationText = locationText)
        return
    }

    // ÏùëÎãµ ÏóÜÏùå
    if (response == null) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = if (locationText.isNullOrBlank())
                    "ÏúÑÏπò Ï†ïÎ≥¥Î•º ÌôïÏù∏ÌïòÎäî Ï§ëÏûÖÎãàÎã§."
                else
                    "Ï∂îÏ≤ú Í≤∞Í≥ºÍ∞Ä ÎèÑÏ∞©ÌïòÏßÄ ÏïäÏïòÏäµÎãàÎã§.",
                color = Color.Gray
            )
        }
        return
    }

    // Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞
    val items = listOfNotNull(
        response?.getOuter(),
        response?.getTop(),
        response?.getBottom()
    ).filter { !it.url.isNullOrBlank() }

    // üîπ ÏÜêÏû°Ïù¥ ÏÉâ Í∞ÄÏ†∏Ïò§Í∏∞
    val handleColor = Color(0xFFEEEEEE)
// üîπ Î∞∞Í≤Ω (ÏÜêÏû°Ïù¥ ÏÉâ ‚Üí Ìù∞ÏÉâ Í∑∏ÎùºÎç∞Ïù¥ÏÖò)
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(
                Brush.verticalGradient(
                    listOf(
                        Color(0xFFEEEEEE),
                        Color(0xFFFFFFFF), // ÌôîÏù¥Ìä∏
                        Color(0xFFEEEEEE)
                    )
                )
            )
            .padding(16.dp)
    ) {
        Spacer(modifier = Modifier.height(12.dp))


        // Ïò§ÎäòÏùò ÎÇ†Ïî® Ï†úÎ™©
        Row(verticalAlignment = Alignment.CenterVertically) {
            Icon(
                painter = painterResource(id = R.drawable.today_weather),
                contentDescription = "Ïò§ÎäòÏùò ÎÇ†Ïî®",
                tint = Color.Unspecified,
                modifier = Modifier.size(28.dp)
            )
            Spacer(modifier = Modifier.width(8.dp))
            Text(
                text = "Ïò§ÎäòÏùò ÎÇ†Ïî®Îäî...",
                fontSize = 22.sp,
                fontWeight = FontWeight.Bold,
                color = textColor
            )
        }

        Spacer(modifier = Modifier.height(12.dp))

        // ÎÇ†Ïî® ÏΩîÎ©òÌä∏
        if (temp != null && weatherCode != null) {
            val weatherResponse by weatherViewModel.weatherData.collectAsState()
            val advice = weatherResponse?.let {
                generateWeatherAdvice(
                    current = it.current,
                    hourly = it.hourly,
                    daily = it.daily,
                    alerts = it.alerts
                )
            }

            advice?.comments?.filter { it.isNotBlank() }?.forEach { comment ->
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 6.dp),
                    verticalAlignment = Alignment.Bottom
                ) {
                    Box(
                        modifier = Modifier.wrapContentWidth()
                    ) {
                        Surface(
                            color = Color.White,
                            shape = RoundedCornerShape(16.dp),
                            shadowElevation = 4.dp,
                            modifier = Modifier.padding(start = 12.dp)
                        ) {
                            Text(
                                text = comment,
                                color = Color.Black,
                                fontSize = 14.sp,
                                modifier = Modifier.padding(horizontal = 16.dp, vertical = 12.dp)
                            )
                        }

                        // Íº¨Î¶¨
                        Canvas(
                            modifier = Modifier
                                .size(13.dp)
                                .align(Alignment.BottomStart)
                                .offset(x = 2.dp, y = (-6).dp)
                        ) {
                            val path = Path().apply {
                                moveTo(size.width, 0f)
                                lineTo(0f, size.height / 2)
                                lineTo(size.width, size.height)
                                close()
                            }
                            drawPath(path, Color.White)
                        }
                    }
                }
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        // Ï∂îÏ≤ú ÏΩîÎîî Ï†úÎ™©
        Row(verticalAlignment = Alignment.CenterVertically) {
            Icon(
                painter = painterResource(id = R.drawable.clothes_rack),
                contentDescription = "Ï∂îÏ≤ú ÏΩîÎîî",
                tint = Color.Unspecified,
                modifier = Modifier.size(28.dp)
            )
            Spacer(modifier = Modifier.width(8.dp))
            Text(
                text = "Ïò§ÎäòÏùò Ï∂îÏ≤ú ÏΩîÎîîÎäî...",
                fontSize = 22.sp,
                fontWeight = FontWeight.Bold,
                color = textColor
            )
        }

        Spacer(modifier = Modifier.height(12.dp))

        // Ï∂îÏ≤ú Ïπ¥Îìú
        if (items.isNotEmpty()) {
            Row(horizontalArrangement = Arrangement.spacedBy(12.dp)) {
                items.forEach { item ->
                    Card(
                        shape = RoundedCornerShape(16.dp),
                        elevation = CardDefaults.cardElevation(6.dp),
                        modifier = Modifier.size(width = 160.dp, height = 200.dp)
                    ) {
                        Box {
                            AsyncImage(
                                model = item.url,
                                contentDescription = item.category,
                                modifier = Modifier.fillMaxSize(),
                                contentScale = ContentScale.Crop
                            )
                            Surface(
                                color = Color.White.copy(alpha = 0.85f),
                                modifier = Modifier
                                    .align(Alignment.BottomCenter)
                                    .fillMaxWidth()
                            ) {
                                Text(
                                    text = item.category ?: "ÏùòÎ•ò",
                                    color = Color.Black,
                                    fontWeight = FontWeight.Bold,
                                    modifier = Modifier.padding(8.dp),
                                    fontSize = 14.sp
                                )
                            }
                        }
                    }
                }
            }
        }

        Spacer(modifier = Modifier.height(24.dp))

        // üîπ Í∞úÏÑ†Îêú ÌîºÎìúÎ∞± Ïª¥Ìè¨ÎÑåÌä∏ Ìò∏Ï∂ú
        RecommendationFeedbackComponent(
            jwt = jwt,
            locationText = locationText,
            viewModel = viewModel
        )

        if (!errorMessage.isNullOrBlank() && response == null) {
            Spacer(modifier = Modifier.height(16.dp))
            Surface(
                color = Color(0xFFFFEBEE),
                shape = RoundedCornerShape(12.dp),
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(
                    text = errorMessage.orEmpty(),
                    color = Color(0xFFD32F2F),
                    fontSize = 14.sp,
                    modifier = Modifier.padding(16.dp)
                )
            }
        }
    }
}
